
    19
    G:\kobe\视频\javaSE\传智播客_2015年Java基础班视频精华版\day27\code\day27_Reflect\src\cn\itcast_05
    看，代码


    沉下心，一页一页啃书
    一个一个敲。

    1.计划学生，模块化学习，
API 文档、Google 和问高人


各路/包/类。
    java.lang
        Math System String StringBuffer StringBuilder Integer Character System



java.io; 操作数据流
    File

java.lang;序设计的基础类
java.sql; 作数据库中的数据
java.text;理文本、日期、数字和消息
    SimpleDateFormat
java.util;作集合、日期时间等
    Random Date Calendar(枚举吧) Arrays
java.util.regex
    Matcher Pattern
Scanner
javax.sql;作数据库中的数据,给哪些 写 数据库驱动厂商用，就是一些 jdbc 标准。

net,
nio,
rmi
java.math
    BigInteger BigDecimal


数据结构，设计模式：这两个重点。

做 web 开发，需要熟悉 Servlet api



多态:
    成员变量 编译看左边，运行看左边。：
    成员方法 编译看左边，运行看右边。

    多态想 访问子类特有的，必须向下转型。
        Zi2 z = (Zi2) p1;  注：p1 是父类的对象。
        不能两个子类之间转换。只能是？？？？
        Fu f = new Zi();
        这个 f 对象
            访问成员变量是：父类里的。
            访问方法是：访问子类里面重写了的 方法。
            如果想访问子类特有的方法，必须向下转型。
        多态弊端，不能使用子类怎特有的方法，必须向下转型了才可以使用。


不让创建对象的方式：：
    定义成抽象类，把构造私有。


    is-a，has-a，like-a是什么，？？？ 它们是什么关系？？？
    is-a。顾名思义，是一个。代表继承关系。

    has-a，顾名思义。有一个。代表从属关系。
    假设A has a B，那么B就是A的组成部分。

    like-a。顾名思义。像一个，代表组合关系。
    假设A like a B，那么B就是A的接口。

5、is-a，has-a，like-a怎样应用
假设你确定两件对象之间是is-a的关系，那么此时你应该使用继承。比方菱形、圆形和方形都是形状的一种。那么他们都应该从形状类继承。
假设你确定两件对象之间是has-a的关系，那么此时你应该使用聚合。比方电脑是由显示器、CPU、硬盘等组成的。那么你应该把显示器、CPU、硬盘这些类聚合成电脑类。
假设你确定两件对象之间是like-a的关系，那么此时你应该使用组合。比方空调继承于制冷机，但它同一时候有加热功能。那么你应该把让空调继承制冷机类，并实现加热接




如何 克隆的，必须要实现 Cloneable 这个标记接口，重写 clone() 方法，然后进行强转类型，就可以进行克隆。




问题：
 StringBuilder 和 集合 哪些容量是干什么的？


练习：
    各种类 的 api 方法。
    数组的 冒泡排序 选择排序 十分查找 等
    进制之机转还 原理等
    网络
    正则表达式
    设计模式
    数据结构, 栈： 队列： 数组： 链表：
    java 各个数据类型特点。

步骤：
    把 javaSe 哪些基本的，如： 常用类api 集合 网络编程 异常 多线程 io 注解 枚举 反射 这些都要通通练习一遍，和设计模式，
    如：传知里。51cto里,硬盘里。
    在看 api 文档。 mysql linux BigData


// 自定义异常时，可以看看，java 的异常是如何写的。


基础 = 并发编程+网络编程+JVM+数据结构+算法+JAVA基础等
二面 = 你工作的内容 + 难点 + 亮点 + 为什么这么做 + 好处 + 你用到的技术框架 + 遇到的坑 + 解决的问题 + 对技术的广度认知
三面 = 你工作的内容亮点 + 技术框架的概念点 + 解决的难点问题 + 做过的优秀设计 + 一个需求如何去设计 + 如何去考虑  总之 二面 是基于使用的 ， 三面是基于原理 和机制 的 还有亮点和设计要打动面试官
四面 = 底层代码 + 底层原理 + 底层机制 + 类比下大家都用的轮子的优缺点 + 你精通那些轮子 + 做过那些轮子




  每种集合，都有特定的需求，根据需求记忆。
  每种集合，它的数据结构都是不同的，
  每种集合，共通点，它们都有 增 删 查 改 curd功能，有些集合有一些特殊的方法，以针对不同需求。

Collection(集合)：是否有序 ,是否可重复。比较功能。

    List:
        ArrayList
        vector
        linkedList
    set:
        HashSet
        LinkedSet
        LinkedHashSet
    map:
        HashMap
        TreeMap
        LinkedHashMap
    注：它们三个都有一个 LinkXxx ,它低层是链表，增删快，查询慢。


https://www.imooc.com/video/3650 进制转换视频。


 用 ArrayList 的 contains() 方法去重时，必须要重写 equals() 和 hashCode() 方法才行。不然去不掉的。
 如果你没有重写 equals() 方法 默认使用的是 Object 类里面的 equals() 它默认比较的是 地址是否相同，没有比较内容的，你就必须要重写 equals() 方法才行，而String 的equals() 默认比较的是 内容是否相同 没有比较地址的。
 注：Idea 重写 equals() 方法是：fn+alt+insert  然后选择哪个，不是 ctrl + o 哦


 在增加for循环里面 进行 添加,删除 就会报 并发异常。要在  fori 里面 get(i) 这个里面它就可以了。



Comparable  与  Comparator 区别：
    Comparable: 自然排序接口
    comparator: 比较器



IO 流：
    字符流，reader 是读到内存里去，Writer 从内存中写出来。







